(load "02-rolling-the-dice")

(defun get-connected (board player pos)
  (labels ((check-pos (pos visited)
	     (if (and (eq (car (aref board pos)) player)
		      (not (member pos visited)))
		 (check-neighbors (neighbors pos) (cons pos visited))
		 visited))
	   (check-neighbors (lst visited)
	     (if lst
		 (check-neighbors (cdr lst) (check-pos (car lst) visited))
		 visited)))
    (check-pos pos '())))

(defun largest-cluster-size (board player)
  (labels ((f (pos visited best)
	     (if (< pos *board-hexnum*)
		 (if (and (eq (car (aref board pos)) player)
			  (not (member pos visited)))
		     (let* ((cluster (get-connected board player pos))
			    (size (length cluster)))
		       (if (> size best)
			   (f (1+ pos) (append cluster visited) size)
			   (f (1+ pos) (append cluster visited) best)))
		     (f (1+ pos) visited best))
		 best)))
    (f 0 '() 0)))

(defun add-new-dice (board player spare-dice)
  (labels ((f (lst n)
	     (cond ((zerop n) lst)
		   ((null lst) nil)
		   (t (let ((cur-player (caar lst))
			    (cur-dice (cadar lst)))
			(if (and (eq cur-player player) (< cur-dice *max-dice*))
			    (cons (list cur-player (1+ cur-dice))
				  (f (cdr lst) (1- n)))
			    (cons (car lst) (f (cdr lst) n))))))))
    (board-array (f (coerce board 'list)
		    (largest-cluster-size board player)))))

;; (serve #'dod-request-handler)


